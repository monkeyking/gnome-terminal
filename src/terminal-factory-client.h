/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Terminal_Factory
#define DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Terminal_Factory

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
org_gnome_Terminal_Factory_handle_arguments (DBusGProxy *proxy, const GArray* IN_working_directory, const GArray* IN_display_name, const GArray* IN_startup_id, const GArray* IN_environment, const GArray* IN_arguments, GError **error)

{
  return dbus_g_proxy_call (proxy, "HandleArguments", error, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_working_directory, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_display_name, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_startup_id, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_environment, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_arguments, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*org_gnome_Terminal_Factory_handle_arguments_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
org_gnome_Terminal_Factory_handle_arguments_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(org_gnome_Terminal_Factory_handle_arguments_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
org_gnome_Terminal_Factory_handle_arguments_async (DBusGProxy *proxy, const GArray* IN_working_directory, const GArray* IN_display_name, const GArray* IN_startup_id, const GArray* IN_environment, const GArray* IN_arguments, org_gnome_Terminal_Factory_handle_arguments_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_new (DBusGAsyncData, 1);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "HandleArguments", org_gnome_Terminal_Factory_handle_arguments_async_callback, stuff, g_free, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_working_directory, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_display_name, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_startup_id, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_environment, dbus_g_type_get_collection ("GArray", G_TYPE_UCHAR), IN_arguments, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_org_gnome_Terminal_Factory */

G_END_DECLS
